{
  "_args": [
    [
      {
        "raw": "grunt-mocha-istanbul@5.0.2",
        "scope": null,
        "escapedName": "grunt-mocha-istanbul",
        "name": "grunt-mocha-istanbul",
        "rawSpec": "5.0.2",
        "spec": "5.0.2",
        "type": "version"
      },
      "/Users/raliclo/work/npu/ghost"
    ]
  ],
  "_from": "grunt-mocha-istanbul@5.0.2",
  "_id": "grunt-mocha-istanbul@5.0.2",
  "_inCache": true,
  "_location": "/grunt-mocha-istanbul",
  "_nodeVersion": "6.3.1",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/grunt-mocha-istanbul-5.0.2.tgz_1470588024933_0.852241029497236"
  },
  "_npmUser": {
    "name": "pocesar",
    "email": "email@pocesar.e4ward.com"
  },
  "_npmVersion": "3.10.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "grunt-mocha-istanbul@5.0.2",
    "scope": null,
    "escapedName": "grunt-mocha-istanbul",
    "name": "grunt-mocha-istanbul",
    "rawSpec": "5.0.2",
    "spec": "5.0.2",
    "type": "version"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/grunt-mocha-istanbul/-/grunt-mocha-istanbul-5.0.2.tgz",
  "_shasum": "23929a8b3f45a66c5fab1f6146e62b58418b7882",
  "_shrinkwrap": null,
  "_spec": "grunt-mocha-istanbul@5.0.2",
  "_where": "/Users/raliclo/work/npu/ghost",
  "bugs": {
    "url": "https://github.com/pocesar/grunt-mocha-istanbul/issues"
  },
  "dependencies": {},
  "description": "Almost config-free Istanbul code coverage reporter for Mocha usage in Grunt",
  "devDependencies": {
    "babel-cli": "^6.9.0",
    "babel-preset-es2015": "^6.13.0",
    "grunt": "^1.0.1",
    "isparta": "^4.0.0",
    "istanbul": "1.1.0-alpha.1",
    "mocha": "^3.0.1"
  },
  "directories": {},
  "dist": {
    "shasum": "23929a8b3f45a66c5fab1f6146e62b58418b7882",
    "tarball": "https://registry.npmjs.org/grunt-mocha-istanbul/-/grunt-mocha-istanbul-5.0.2.tgz"
  },
  "gitHead": "e404dce6fdc36599f3272b54f102939c5bdd220d",
  "homepage": "https://github.com/pocesar/grunt-mocha-istanbul#readme",
  "keywords": [
    "grunt",
    "gruntplugin",
    "mocha",
    "istanbul",
    "test",
    "coverage",
    "coveralls"
  ],
  "license": "MIT",
  "main": "tasks/index.js",
  "maintainers": [
    {
      "name": "pocesar",
      "email": "gahgneh@gmail.com"
    }
  ],
  "name": "grunt-mocha-istanbul",
  "optionalDependencies": {},
  "peerDependencies": {
    "grunt": ">=0.4.0"
  },
  "readme": "[![Dependency Status](https://david-dm.org/pocesar/grunt-mocha-istanbul.png?theme=shields.io)](https://david-dm.org/pocesar/grunt-mocha-istanbul)\r\n[![Build Status](https://travis-ci.org/pocesar/grunt-mocha-istanbul.svg?branch=master)](https://travis-ci.org/pocesar/grunt-mocha-istanbul)\r\n\r\n[![NPM](https://nodei.co/npm/grunt-mocha-istanbul.png?downloads=true&stars=true)](https://nodei.co/npm/grunt-mocha-istanbul/)\r\n\r\n# grunt mocha istanbul task\r\n\r\n> [Mocha](https://mochajs.org) reporter to generate coverage report of [istanbul](http://gotwarlost.github.com/istanbul/) instrumented code, for grunt\r\n\r\n> This doesn't force you to use PhantomJS, or instrument code for server or client-side.\r\n\r\n## Getting Started\r\n\r\n1. Install needed dependencies using: `npm install grunt mocha istanbul --save-dev`\r\n2. Install this package using: `npm install grunt-mocha-istanbul --save-dev`\r\n3. Call inside `Gruntfile.js`: `grunt.loadNpmTasks('grunt-mocha-istanbul')`\r\n\r\n### Compatible tools\r\n\r\nAlthough it's intended for use with [Istanbul](https://github.com/gotwarlost/istanbul), you can freely\r\nuse this task with other command line compatible tool, by changing the `scriptPath` option, such as:\r\n\r\n* [Ibrik](https://github.com/Constellation/ibrik)\r\n* [Babel Istanbul](https://github.com/ambitioninc/babel-istanbul)\r\n* [Isparta](https://github.com/douglasduteil/isparta)\r\n\r\n```js\r\ngrunt.initConfig({\r\n    mocha_istanbul: {\r\n        target: {\r\n            options: {\r\n                scriptPath: require.resolve('coverage-tool/the/path/to/bin'), // usually in nameofcoveragelibrary/lib/cli\r\n            }\r\n        }\r\n    }\r\n});\r\n```\r\n\r\n#### Running ES2015+ tests with ES2015+ sources (through Babel-CLI)\r\n\r\nBefore anything, install babel required stuff.\r\n\r\n```\r\nnpm install babel-cli babel-presets-2015 babel-register\r\n```\r\n\r\nDefine your .babelrc file on the same level as Gruntfile.js\r\n\r\n```json\r\n{\r\n    \"presets\": [\"es2015\"]\r\n}\r\n```\r\n\r\nThen you'll need to use Isparta, until Istanbul 1.0 is released. (or you can use 1.0.0-alpha.2)\r\n\r\n```js\r\n{\r\n    mocha_istanbul: {\r\n        src: 'test',\r\n        options: {\r\n            scriptPath: require.resolve('isparta/lib/cli'),\r\n            nodeExec: require.resolve('.bin/babel-node') // for Windows, you MUST use .bin/babel-node.cmd instead\r\n            mochaOptions: ['--compilers', 'js:babel-register'], // if you are writing your tests with ES2015+ as well\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nNOTE: for some unknown reason, using babel-node as nodeExec, with `print` option makes it fail.\r\n\r\n### Usage Examples\r\n\r\nMost of the options that you pass to mocha is available in `options`:\r\n\r\n```js\r\nmodule.exports = function(grunt){\r\n    grunt.initConfig({\r\n        mocha_istanbul: {\r\n            coverage: {\r\n                src: 'test', // a folder works nicely\r\n                options: {\r\n                    mask: '*.spec.js'\r\n                }\r\n            },\r\n            coverageSpecial: {\r\n                src: ['testSpecial/*/*.js', 'testUnique/*/*.js'], // specifying file patterns works as well\r\n                options: {\r\n                    coverageFolder: 'coverageSpecial',\r\n                    mask: '*.spec.js',\r\n                    mochaOptions: ['--harmony','--async-only'], // any extra options\r\n                    istanbulOptions: ['--harmony','--handle-sigint']\r\n                }\r\n            },\r\n            coveralls: {\r\n                src: ['test', 'testSpecial', 'testUnique'], // multiple folders also works\r\n                options: {\r\n                    coverage:true, // this will make the grunt.event.on('coverage') event listener to be triggered\r\n                    check: {\r\n                        lines: 75,\r\n                        statements: 75\r\n                    },\r\n                    root: './lib', // define where the cover task should consider the root of libraries that are covered by tests\r\n                    reportFormats: ['cobertura','lcovonly']\r\n                }\r\n            }\r\n        },\r\n        istanbul_check_coverage: {\r\n          default: {\r\n            options: {\r\n              coverageFolder: 'coverage*', // will check both coverage folders and merge the coverage results\r\n              check: {\r\n                lines: 80,\r\n                statements: 80\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n    });\r\n\r\n    grunt.event.on('coverage', function(lcovFileContents, done){\r\n        // Check below on the section \"The coverage event\"\r\n        done();\r\n    });\r\n\r\n    grunt.loadNpmTasks('grunt-mocha-istanbul');\r\n\r\n    grunt.registerTask('coveralls', ['mocha_istanbul:coveralls']);\r\n    grunt.registerTask('coverage', ['mocha_istanbul:coverage']);\r\n};\r\n```\r\n\r\nIf there's a `mocha.opts` file inside the first `src` folder or file defined, it will warn if you are overwriting any options.\r\n\r\nCoverage is written to `coverage` folder by default, in the same level as the `Gruntfile.js`\r\n\r\nThe `check` will fail the build if the thresholds are not met. It's a great possibility for CI-builds.\r\n\r\n### Options\r\n\r\nMochas parameters, check [https://mochajs.org/#usage](https://mochajs.org/#usage)\r\n\r\n### Mocha options\r\n\r\n### options.require\r\n\r\nType: `Array`\r\n\r\nDefault Value: `[]`\r\n\r\n### options.ui\r\n\r\nType: `Boolean`\r\n\r\nDefault Value: `false`\r\n\r\n### options.globals\r\n\r\nType: `Array`\r\n\r\nDefault Value: `[]`\r\n\r\n### options.reporter\r\n\r\nType: `String`\r\n\r\nDefault Value: `false`\r\n\r\n### options.timeout\r\n\r\nType: `Number`\r\n\r\nDefault Value: `false`\r\n\r\n### options.slow\r\n\r\nType: `Boolean`\r\n\r\nDefault Value: `false`\r\n\r\n### options.grep\r\n\r\nType: `String`\r\n\r\nDefault Value: `false`\r\n\r\n### options.recursive\r\n\r\nType: `Boolean`\r\n\r\nDefault Value: `false`\r\n\r\n### options.noColors\r\n\r\nType: `Boolean`\r\n\r\nDefault Value: `false`\r\n\r\n### options.nodeOptions\r\n\r\nType: `Array`\r\n\r\nDefault Value: `false`\r\n\r\nAn array of strings, any additional node executable parameters, manually set.\r\n\r\nEg.: `nodeOptions: ['--throw-deprecation', '--require', 'some/module']`\r\n\r\n### options.mask\r\n\r\nType: `String`\r\n\r\nDefault Value: `false`\r\n\r\nThe mask for the tests to be ran. By default, mocha will execute the `test` folder and all test files.\r\nWill override any files specified in `src` and instead use the mask on those files' folders.\r\n\r\n### options.mochaOptions\r\n\r\nType: `Array`\r\n\r\nDefault Value: `false`\r\n\r\nAn array of strings, any additional mocha parameters, manually set.\r\n\r\nEg.: `mochaOptions: ['--harmony', '-s', '100']`\r\n\r\n### Istanbul options\r\n\r\n### options.excludes\r\n\r\nType: `Array`\r\n\r\nDefault Value: `false`\r\n\r\nSetting this exclude files from coverage report, check `istanbul help cover`. You may use glob matching in here.\r\n\r\n### options.includes\r\n\r\nType: `Array`\r\n\r\nDefault Value: `false`\r\n\r\nSetting this includes only those files in the coverage report, check `istanbul help cover`. You may use glob matching in here.\r\n\r\n### options.istanbulOptions\r\n\r\nType: `Array`\r\n\r\nDefault Value: `false`\r\n\r\nAn array of strings, any additional istanbul parameters, manually set.\r\n\r\nEg.: `istanbulOptions: ['--harmony', '--handle-sigint', 'some=value', '-s', 'value']`\r\n\r\n### options.coverageFolder\r\n\r\nType: `String`\r\n\r\nDefault Value: `'coverage'`\r\n\r\nName of the output of the coverage folder\r\n\r\n#### options.reportFormats\r\n\r\nType: `Array`\r\n\r\nDefault Value: `['lcov']`\r\n\r\nName of report formats. You can specify more than one. If you intend to use the `coverage` option to\r\n`true` or do any checks, you must add: `['yourformat','lcovonly']`, since it's needed for the `lcov.info`\r\nfile to be created.\r\n\r\n[Supported formats](https://github.com/gotwarlost/istanbul#the-report-command):\r\n\r\n> html - produces a bunch of HTML files with annotated source code\r\n\r\n> lcovonly - produces an lcov.info file\r\n\r\n> lcov - produces html + lcov files. This is the default format\r\n\r\n> cobertura - produces a cobertura-coverage.xml file for easy Hudson integration\r\n\r\n> text-summary - produces a compact text summary of coverage, typically to console\r\n\r\n> text - produces a detailed text table with coverage for all files\r\n\r\n> teamcity - produces service messages to report code coverage to TeamCity\r\n\r\n### options.root\r\n\r\nType: `String`\r\n\r\nDefault Value: `false`\r\n\r\nThe root path to look for files to instrument, defaults to `.`. Can help to exclude directories that are not\r\npart of the code whose coverage should be checked.\r\n\r\n### options.print\r\n\r\nType: `String`\r\n\r\nDefault Value: `false`\r\n\r\nThe type of report to print to console. Can be one of 'summary', 'detail', 'both', or 'none'. By\r\n\r\nDefault, Istanbul will print the 'summary' report.\r\n\r\n### Task options\r\n\r\n### options.scriptPath\r\n\r\nType: `String`\r\n\r\nDefault Value: `'istanbulPath'`\r\n\r\nAllows to override the default istanbul path to use another coverage library, such as [ibrik](https://www.npmjs.com/package/ibrik).\r\nNeed to set the full path to the bin (script that accepts stdin arguments) and is compatible with `cover`.\r\n\r\n### options.coverage\r\n\r\nType: `Boolean`\r\n\r\nDefault Value: `false`\r\n\r\nSetting this to `true` **makes the task emit a grunt event `coverage`**, that will contain the lcov data from\r\nthe file, containing the following callback `function(lcovcontent, done)`, and **you must manually call\r\n`done()` when you are finished, else the grunt task will HANG, and won't allow any other tasks to finish**.\r\n[See more information below](#the-coverage-event)\r\n\r\n### options.dryRun\r\n\r\nType: `Boolean`\r\n\r\nDefault Value: `false`\r\n\r\nSpits out the command line that would be called, just to make sure everything is alright\r\n\r\n### options.nodeExec\r\n\r\nType: `String`\r\n\r\nDefault Value: `process.execPath`\r\n\r\nSets the node executable that will invoke Istanbul and Mocha. Useful for setting something else than node, like `babel-node`\r\n\r\n### options.cwd\r\n\r\nType: `String`\r\n\r\nDefault Value: `process.cwd()`\r\n\r\nSets the current working directly. Note that changing this might have unexpected results, since the plugin and Grunt expects\r\nto be working on the same level of `Gruntfile.js`\r\n\r\n### options.quiet\r\n\r\nType: `Boolean`\r\n\r\nDefault Value: `false`\r\n\r\nSuppresses the output from Mocha and Istanbul\r\n\r\n### options.check.statements\r\n\r\nType: `Number`\r\n\r\nDefault Value: `false`\r\n\r\nNumber of statements threshold to consider the coverage valid\r\n\r\n### options.check.lines\r\n\r\nType: `Number`\r\n\r\nDefault Value: `false`\r\n\r\nNumber of lines threshold to consider the coverage valid\r\n\r\n### options.check.branches\r\n\r\nType: `Number`\r\n\r\nDefault Value: `false`\r\n\r\nNumber of branches threshold to consider the coverage valid\r\n\r\n### options.check.functions\r\n\r\nType: `Number`\r\n\r\nDefault Value: `false`\r\n\r\nNumber of functions threshold to consider the coverage valid\r\n\r\n### The coverage event\r\n\r\nWhen you set the option `coverage` to `true`, you'll receive the `coverage/lcov.info` file contents:\r\n\r\n```js\r\ngrunt.event.on('coverage', function(lcov, done){\r\n    console.log(lcov);\r\n    done(); // or done(false); in case of error\r\n});\r\n```\r\n\r\nThis is mainly useful so you can send it to, for example, coveralls (using [coveralls](https://github.com/nickmerwin/node-coveralls)):\r\n\r\n```js\r\ngrunt.event.on('coverage', function(lcov, done){\r\n    require('coveralls').handleInput(lcov, function(err){\r\n        if (err) {\r\n            return done(err);\r\n        }\r\n        done();\r\n    });\r\n});\r\n```\r\n\r\nThis way, Travis-CI can send the Istanbul generated LCOV directly to Coveralls.io website in this example, but you could\r\ncreate any transform for Jenkins, TeamCity, Hudson, etc.\r\n\r\n## LICENSE\r\n\r\nMIT\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/pocesar/grunt-mocha-istanbul.git"
  },
  "scripts": {
    "test": "grunt"
  },
  "version": "5.0.2"
}
